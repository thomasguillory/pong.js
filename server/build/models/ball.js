// Generated by CoffeeScript 1.7.1
(function() {
  var Ball,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Ball = (function() {
    Ball.WIDTH = 2;

    Ball.HEIGHT = 4;

    Ball.ACCELERATION = 0.04;

    function Ball(options) {
      this.sendValuesTo = __bind(this.sendValuesTo, this);
      this.sendValues = __bind(this.sendValues, this);
      this.game = options.game;
      this.paddle1 = this.game.player1.paddle;
      this.paddle2 = this.game.player2.paddle;
      this.initialize();
    }

    Ball.prototype.initialize = function() {
      this.moveTo(50, 50);
      this.dx = -0.5;
      return this.dy = 0.15;
    };

    Ball.prototype.moveTo = function(x, y) {
      this.x = x;
      this.y = y;
      return this.sendValues();
    };

    Ball.prototype.sendValues = function() {
      return this.game.broadcast('ball.position', this.x, this.y);
    };

    Ball.prototype.sendValuesTo = function(socket) {
      return socket.emit('ball.position', this.x, this.y);
    };

    Ball.prototype.update = function() {
      if (this.y < this.constructor.HEIGHT / 2 || this.y > (100 - this.constructor.HEIGHT / 2)) {
        this.dy = -this.dy;
      }
      if (this.x < this.paddle1.constructor.WIDTH + this.constructor.WIDTH / 2 && this.y > (this.paddle1.position - this.paddle1.constructor.HEIGHT / 2 - this.constructor.HEIGHT / 2) && this.y < (this.paddle1.position + this.paddle1.constructor.HEIGHT / 2 + this.constructor.HEIGHT / 2)) {
        this._handleBallCollision();
      }
      if (this.x > 100 - this.paddle2.constructor.WIDTH - this.constructor.WIDTH / 2 && this.y > (this.paddle2.position - this.paddle2.constructor.HEIGHT / 2 - this.constructor.HEIGHT / 2) && this.y < (this.paddle2.position + this.paddle2.constructor.HEIGHT / 2 + this.constructor.HEIGHT / 2)) {
        this._handleBallCollision();
      }
      if (this.x < 0) {
        this.game.player2.win();
      }
      if (this.x > 100) {
        this.game.player1.win();
      }
      return this.moveTo(this.x + this.dx, this.y + this.dy);
    };

    Ball.prototype._handleBallCollision = function() {
      this.dx = -this.dx * (1 + this.constructor.ACCELERATION);
      this.dy += this.paddle1.dy / 5;
      return this.game.broadcast('ball.pong');
    };

    return Ball;

  })();

  exports.Ball = Ball;

}).call(this);
